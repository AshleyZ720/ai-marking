project: "MVP Homework Marking System"
description: >
  This MVP is an AI-driven homework marking system designed for quick iteration.
  Users can upload a marking criteria PDF and a student homework PDF.
  The backend uses Microsoft MarkItDown to convert the PDFs to Markdown, feeds the extracted text
  into an LLM (via our llm_service) for generating marks and feedback, and finally renders the
  (potentially edited) Markdown back into a PDF for download.
  
techStack:
  backend:
    language: Python
    framework: FastAPI
    libraries:
      - markitdown: "Microsoft's open-source tool for converting PDFs (and other file types) to Markdown."
      - weasyprint: "Library for converting HTML (generated from Markdown) to PDF."
      - markdown: "Library for converting Markdown to HTML."
      - requests: "Used to call the LLM API for feedback generation."
    description: "The backend orchestrates file uploads, conversion workflows, LLM interactions, and PDF output."
  frontend:
    languages: [HTML, CSS, JavaScript]
    description: "A simple interface that allows users to upload PDFs and displays the status/feedback."
  containerization:
    tool: Docker
    orchestrator: docker-compose

fileStructure:
  backend:
    - app.py: "Entry point for the FastAPI application; initializes the server and registers endpoints."
    - config.py: "Holds configuration settings (API keys, ports, environment variables)."
    - endpoints/upload.py: "Handles file uploads and processing requests."
    - services/pdf_processor.py: "Uses MarkItDown to convert uploaded PDFs into Markdown text for further processing."
    - services/llm_service.py: "Handles API calls to the LLM (e.g., GPT-4) for generating marks and feedback based on the Markdown content."
    - services/md_to_pdf.py: "Converts Markdown back to PDF using the markdown and weasyprint libraries."
    - services/marking_engine.py: "Orchestrates the full workflow: PDF-to-Markdown conversion, LLM processing, and Markdown-to-PDF conversion."
    - utils/file_helpers.py: "Contains helper functions for file I/O operations, temporary storage, and format conversions."
    - requirements.txt: "Lists all Python dependencies (FastAPI, markitdown, weasyprint, markdown, requests, etc.)."
    - Dockerfile: "Dockerfile for containerizing the backend application."
    - README.md: "Documentation for backend setup, usage, and development guidelines."
  frontend:
    - index.html: "A simple HTML page that provides a form for uploading PDFs."
    - app.js: "JavaScript to handle file uploads, communicate with the backend API, and display results."
    - styles.css: "Basic CSS styling for the upload page and UI elements."
    - README.md: "Documentation for setting up and using the frontend."
  root:
    - docker-compose.yml: "Orchestrates the backend and frontend containers for local development and deployment."
    - nginx.conf: "Nginx configuration for serving the frontend and proxying API requests to the backend."
    - .env: "Holds environment variables (API keys, ports, etc.) to keep sensitive data out of source code."
    - README.md: "Overall project documentation, including setup instructions and high-level overview."

codeGuidelines:
  - "Maintain the modular file structure as defined above to ensure separation of concerns between services, utilities, and endpoints."
  - "Include clear inline comments and file-level documentation for every module."
  - "Adhere to PEP8 and FastAPI best practices for coding and endpoint design."
  - "Sensitive configuration (API keys, etc.) must be stored in the .env file."
  - "Ensure that all new code is accompanied by tests and updates to the README.md where applicable."

cursorRules:
  - "Follow the provided file structure and naming conventions strictly to maintain consistency."
  - "When adding or modifying code, ensure it aligns with the specified technical stack: use MarkItDown for PDF-to-Markdown conversion and weasyprint for rendering Markdown back to PDF."
  - "All new services or utilities should include documentation and unit tests."
  - "Check this .cursorrules file regularly to ensure that your contributions remain consistent with the overall project guidelines."
  - "Any modifications to the conversion workflow must be clearly documented and justified in code comments and the README files."
